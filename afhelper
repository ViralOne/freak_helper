#!/bin/bash

_temp="/tmp/answer.$$"
_temp_var="$$"
alegere="off"
tools=("off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off" "off")

VER="0.6"

menu() {
 dialog --backtitle "Install all the tools you need" --title " Freak Helper - v$VER "\
        --cancel-label "Quit" \
        --menu "Move using [UP] [DOWN], [Enter] to select" 17 60 10\
        FrontEnd "Intall tools for Frontend Developer" \
        BackEnd "Intall tools for Backend Developer" \
        Android "Intall tools for Android Developers" \
        Data "Intall tools for Data Developer" \
        DevOps "Intall tools for DevOps Engineering" \
        Quit "Close Freak Helper" 2>$_temp
       
    opt=${?}
    if [ $opt != 0 ]; then rm $_temp; exit; fi
    menuitem=`cat $_temp`
    echo "menu=$menuitem"
    case $menuitem in
        FrontEnd) _temp_var="frontend" ; check ; software;;
        BackEnd) _temp_var="backend" ; check ;  software;;
        Android) _temp_var="android" ; check ; software;;
        Data) _temp_var="data" ; check ; software;;
        DevOps) _temp_var="devops" ; check ; software;;
        Quit) rm $_temp; clear; exit;;
    esac
}

check() {
  if [ "$_temp_var" == "frontend" ]; then
    tools[0]="on"
    tools[1]="on"
    tools[2]="on"
    tools[3]="on"
    tools[6]="on"
    tools[9]="on"
    tools[17]="on"
    tools[19]="on"
    tools[22]="on"
  else if [ "$_temp_var" == "backend" ]; then
    tools[0]="on"
    tools[1]="on"
    tools[2]="on"
    tools[3]="on"
    tools[4]="on"
    tools[6]="on"
    tools[9]="on"
    tools[13]="on"
    tools[17]="on"
    tools[19]="on"
    tools[22]="on"
  else if [ "$_temp_var" == "android" ]; then
    tools[0]="on"
    tools[2]="on"
    tools[3]="on"
    tools[5]="on"
    tools[6]="on"
    tools[9]="on"
    tools[19]="on"
    tools[22]="on"
  else if [ "$_temp_var" == "data" ]; then
    tools[0]="on"
    tools[1]="on"
    tools[2]="on"
  else if [ "$_temp_var" == "devops" ]; then
    tools[0]="on"
    tools[1]="on"
    tools[2]="on"
    tools[3]="on"
    tools[6]="on"
    tools[8]="on"
    tools[9]="on"
    tools[10]="on"
    tools[13]="on"
    tools[14]="on"
    tools[15]="on"
    tools[17]="on"
    tools[19]="on"
    tools[20]="on"
    tools[21]="on"
    tools[22]="on"
    tools[23]="on"
    tools[25]="on"
    tools[26]="on"
    tools[27]="on"
    tools[28]="on"
    fi
   fi
  fi
 fi
fi
}

software(){
    cmd=(dialog --separate-output --ok-label "Install" --checklist "Move using [UP] [DOWN], [Space-Bar] to select & [ENTER] to install" 22 76 16)
    options=(1 "Git" ${tools[0]}
	         2 "NVM" ${tools[1]}
             3 "Chrome" ${tools[2]}
	         4 "asdf" ${tools[3]}
	         5 "RubyMine" ${tools[4]}
	         6 "Android Studio" ${tools[5]}
	         7 "Visual Studio Code" ${tools[6]}
	         8 "Generate SSH Keys" ${tools[7]}
             9 "Nmap" ${tools[8]}
             10 "Slack" ${tools[9]}
             11 "SOPS" ${tools[10]}
             12 "MySQL" ${tools[11]}
             13 "PostgreSQL" ${tools[12]}
             14 "Ruby" ${tools[13]}
             15 "Python3" ${tools[14]}
             16 "GoLang" ${tools[15]}
             17 "Postman" ${tools[16]}
             18 "Insomnia" ${tools[17]}
             19 "GitKraken" ${tools[18]}
             20 "Docker" ${tools[19]}
             21 "Kubernetes" ${tools[20]}
             22 "Terraform" ${tools[21]}
             23 "AWS VPN Client" ${tools[22]}
             24 "AWS CLI" ${tools[23]}
             25 "thefuck" ${tools[24]}
             26 "ZSH" ${tools[25]}
             27 "K9s" ${tools[26]}
             28 "ASDF Plugins" ${tools[28]}
             )
        choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
        clear
        for choice in $choices
        do
            case $choice in
            1)
				echo "Installing Git, please configure it later..."
				apt install -y git 
				;;
			2)
				echo "Installing NVM"
				curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
                echo "You will need to export NVM_DIR, please follow the instructions from NVM repo"
				;;
            3)
                echo "Installing Google Chrome"
                sudo apt install google-chrome-stable
                ;;
    		4)	
				echo "Installing ASDF"
                git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.10.2
                echo '. $HOME/.asdf/asdf.sh' >> ~/.bashrc && echo '. $HOME/.asdf/completions/asdf.bash' >> ~/.bashrc
				;;
			5)
                echo "Installing RubyMine"
                sudo snap install rubymine --classic 
                ;;
			6)
				echo "Installing Android Studio"
                sudo apt install -y openjdk-11-jdk
				sudo snap install android-studio --classic
                sudo apt install -y android-tools
				;;
			7)
				echo "Installing Visual Studio Code"
				sudo apt install software-properties-common apt-transport-https
                wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
                sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
                sudo sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'
				sudo apt update
                sudo apt install code -y
				;;
			8)
				echo "Generating SSH keys"
				ssh-keygen -t rsa -b 4096 -N "" -f work.key
				;;
			9)
				echo "Installing nmap"
                sudo apt install nmap
                ;;
            10)
                echo "Installing Slack"
                wget https://downloads.slack-edge.com/releases/linux/4.21.1/prod/x64/slack-desktop-4.21.1-amd64.deb
                sudo apt install ./slack-desktop-4.2.0-amd64.deb
                sudo apt update
                sudo apt upgrade slack-desktop -y
                ;;
            11) 
                echo "Installing SOPS"
                sudo apt-get install sops -y
                ;;
            12) 
                echo "Installing MySQL"
                sudo apt-get install mysql-server -y
                ;;
            13) 
                echo "Installing PostgreSQL"
                sudo apt-get install postgresql postgresql-contrib -y
                ;;
            14) 
                echo "Installing Rubby"
                sudo apt-get install ruby-full -y
                sudo apt-get install ruby-bundler -y
                ;;
            15) 
                echo "Installing Python3.9"
                sudo apt-get install python3.9 -y
                ;;
            16) 
                echo "Installing Go"
                sudo apt-get install golang-go -y
                ;;
            17) 
                echo "Installing Postman"
                wget https://dl.pstmn.io/download/latest/linux64 -O postman.tar.gz
                tar -xzf postman.tar.gz
                sudo rm postman.tar.gz
                sudo mv Postman /opt/
                sudo ln -s /opt/Postman/Postman /usr/bin/postman
                ;;
            18)
                echo "Installing Insomnia"
                echo "deb [trusted=yes arch=amd64] https://download.konghq.com/insomnia-ubuntu/ default all" \
                    | sudo tee -a /etc/apt/sources.list.d/insomnia.list

                # Refresh repository sources and install Insomnia
                sudo apt-get update
                sudo apt-get install insomnia
                ;;
            19)
                echo "Installing GitKraken"
                wget https://release.gitkraken.com/linux/gitkraken-amd64.deb
                sudo dpkg -i gitkraken-amd64.deb
                rm gitkraken-amd64.deb
                ;;
            
            20) 
                echo "Installing Docker" 
                # code is broken, I test it on my machine and it just breaks the installation

                # curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                # sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                # sudo apt-get update
                # sudo apt-get install docker-ce -y
                # sudo groupadd docker
                # sudo usermod -aG docker $USER
                # newgrp docker 
                # sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                # sudo chmod +x /usr/local/bin/docker-compose
                # sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
                ;;
            21)
                echo "Installing Kubernetes"
                wget https://dl.k8s.io/v1.22.2/kubernetes-client-linux-amd64.tar.gz
                tar -xzf kubernetes-client-linux-amd64.tar.gz
                sudo rm kubernetes-client-linux-amd64.tar.gz
                sudo mv kubernetes/client/bin/kubectl /usr/local/bin/kubectl
                sudo mv kubernetes/client/bin/kubeadm /usr/local/bin/kubeadm
                sudo mv kubernetes/client/bin/kubelet /usr/local/bin/kubelet
                sudo mv kubernetes/client/bin/kube-proxy /usr/local/bin/kube-proxy
                ;;
            22)
                echo "Installing Terraform"
                LATEST_RELEASE=$(curl https://api.github.com/repos/hashicorp/terraform/releases/latest | jq --raw-output '.tag_name' | cut -c 2-)
                if [[ ! -e ${LATEST_RELEASE} ]]; then
                echo "Installing Terraform ${LATEST_RELEASE}..."
                rm terraform-*
                rm terraform
                wget https://releases.hashicorp.com/terraform/${LATEST_RELEASE}/terraform_${LATEST_RELEASE}_linux_amd64.zip
                unzip terraform_${LATEST_RELEASE}_linux_amd64.zip
                rm terraform_${LATEST_RELEASE}_linux_amd64.zip
                touch ${LATEST_RELEASE}
                else
                echo "Latest Terraform already installed."
                fi
                ;;
            23)
                echo "Installing AWS VPN Client"
                wget -q -O - https://d20adtppz83p9s.cloudfront.net/GTK/latest/debian-repo/awsvpnclient_public_key.asc | sudo apt-key add -
                echo "deb [arch=amd64] https://d20adtppz83p9s.cloudfront.net/GTK/latest/debian-repo ubuntu-20.04 main" | sudo tee /etc/apt/sources.list.d/aws-vpn-client.list
                sudo apt-get update
                sudo apt-get install awsvpnclient
                ;;
            24)
                echo "Installing AWS CLI"
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install
                sudo rm -rf awscliv2.zip aws
                ;;
            25)
                echo "Installing thefuck"
                sudo apt update
                sudo apt install python3-dev python3-pip python3-setuptools
                pip3 install thefuck --user
                ;;
            26)
                echo "Installing ZSH"
                sudo apt-get install zsh -y
                sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
                ;;
            27) 
                echo "Installing K9s"
                curl -s https://api.github.com/repos/derailed/k9s/releases/latest \
                | grep "Linux_x86_64" \
                | cut -d : -f 2,3 \
                | tr -d \" \
                | wget -qi - \
                | tar -xzvf - -C /usr/local/bin
                ;;
            28)
                echo "ASDF Plugins"
                 #awscli
                asdf plugin add https://github.com/MetricMike/asdf-awscli.git
                #azure-cli
                asdf plugin-add azure-cli https://github.com/itspngu/asdf-azure-cli
                #gcloud
                asdf plugin add gcloud https://github.com/jthegedus/asdf-gcloud
                #GitHub CLI
                asdf plugin-add github-cli https://github.com/bartlomiejdanek/asdf-github-cli.git
                #docker-slim
                asdf plugin-add docker-slim https://github.com/everpeace/asdf-docker-slim.git
                #helm
                asdf plugin-add helm https://github.com/Antiarchitect/asdf-helm.git
                #helm-docs
                asdf plugin-add helm-docs https://github.com/sudermanjr/asdf-helm-docs.git
                #Helm Diff
                asdf plugin-add helm-diff https://github.com/dex4er/asdf-helm-diff.git
                #helmfile
                asdf plugin-add helmfile https://github.com/feniix/asdf-helmfile.git
                #k9s
                asdf plugin-add k9s https://github.com/looztra/asdf-k9s
                #kompose
                asdf plugin add https://github.com/technikhil314/asdf-kompose.git
                #sops
                asdf plugin-add sops https://github.com/feniix/asdf-sops.git
                #terraform
                asdf plugin-add terraform https://github.com/asdf-community/asdf-hashicorp.git
                asdf plugin-add terraform-ls https://github.com/asdf-community/asdf-hashicorp.git
                #terraform-docs
                asdf plugin-add terraform-docs https://github.com/looztra/asdf-terraform-docs
                #terraformer
                asdf plugin add terraformer https://github.com/grimoh/asdf-terraformer.git
                #terragrunt
                asdf plugin-add terragrunt https://github.com/ohmer/asdf-terragrunt
                #tfsec
                asdf plugin-add tfsec https://github.com/woneill/asdf-tfsec
                #starship
                asdf plugin add starship
                ;;
	    esac
        clear
	done
}

if [[ $EUID -ne 0 ]]; then
   	echo "You must run this with 'sudo'" 
   	exit 1
else
    menu
fi
